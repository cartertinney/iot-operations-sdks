<#@ template language="C#" linePragmas="false" #>
// Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT.
package <#=this.enumType.Namespace.GetFolderName(TargetLanguage.Go)#>

import (
	"encoding/json"
)

type <#=this.enumType.SchemaName.GetTypeName(TargetLanguage.Go)#> int32

const (
<# foreach (var enumValue in this.enumType.EnumValues) { #>
	<#=enumValue.Name.GetTypeName(TargetLanguage.Go)#> <#=this.enumType.SchemaName.GetTypeName(TargetLanguage.Go)#> = <#=enumValue.IntValue#>
<# } #>
)

func (v <#=this.enumType.SchemaName.GetTypeName(TargetLanguage.Go)#>) String() string {
	switch v {
<# foreach (var enumValue in this.enumType.EnumValues) { #>
	case <#=enumValue.Name.GetTypeName(TargetLanguage.Go)#>:
		return "<#=enumValue.Name.GetTypeName(TargetLanguage.Go)#>"
<# } #>
	default:
		return ""
	}
}

func (v <#=this.enumType.SchemaName.GetTypeName(TargetLanguage.Go)#>) MarshalJSON() ([]byte, error) {
	return json.Marshal(int32(v))
}

func (v *<#=this.enumType.SchemaName.GetTypeName(TargetLanguage.Go)#>) UnmarshalJSON(b []byte) error {
	var s int32
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	*v = <#=this.enumType.SchemaName.GetTypeName(TargetLanguage.Go)#>(s)
	return nil
}
