<#@ template language="C#" linePragmas="false" #>
// Code generated by Azure.Iot.Operations.ProtocolCompiler v<#=System.Reflection.Assembly.GetExecutingAssembly().GetName().Version#>; DO NOT EDIT.
package <#=this.enumType.Namespace.GetFolderName(TargetLanguage.Go)#>

import (
	"encoding/json"
	"errors"
)

type <#=this.enumType.SchemaName.GetTypeName(TargetLanguage.Go)#> int32

const (
<# foreach (var enumValue in this.enumType.EnumValues) { #>
	<#=enumValue.Name.GetTypeName(TargetLanguage.Go)#> <#=this.enumType.SchemaName.GetTypeName(TargetLanguage.Go)#> = <#=enumValue.IntValue?.ToString() ?? "iota"#>
<# } #>
)

func (v <#=this.enumType.SchemaName.GetTypeName(TargetLanguage.Go)#>) String() string {
	switch v {
<# foreach (var enumValue in this.enumType.EnumValues) { #>
	case <#=enumValue.Name.GetTypeName(TargetLanguage.Go)#>:
		return "<#=enumValue.Name.GetTypeName(TargetLanguage.Go)#>"
<# } #>
	default:
		return ""
	}
}

func (v <#=this.enumType.SchemaName.GetTypeName(TargetLanguage.Go)#>) MarshalJSON() ([]byte, error) {
	var s string
	switch v {
<# foreach (var enumValue in this.enumType.EnumValues) { #>
	case <#=enumValue.Name.GetTypeName(TargetLanguage.Go)#>:
		s = "<#=enumValue.StringValue#>"
<# } #>
	default:
		return []byte{}, errors.New("unable to marshal unrecognized enum value to JSON")
	}

	return json.Marshal(s)
}

func (v *<#=this.enumType.SchemaName.GetTypeName(TargetLanguage.Go)#>) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	switch s {
<# foreach (var enumValue in this.enumType.EnumValues) { #>
	case "<#=enumValue.StringValue#>":
		*v = <#=enumValue.Name.GetTypeName(TargetLanguage.Go)#>
<# } #>
	default:
		return errors.New("unable to unmarshal unrecognized enum value from JSON")
	}

	return nil
}
